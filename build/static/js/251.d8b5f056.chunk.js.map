{"version":3,"file":"static/js/251.d8b5f056.chunk.js","mappings":"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","sources":["pages/login/Login.tsx","utils/Common.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","bootstrap.tsx","../node_modules/react-dom/client.js"],"sourcesContent":["import React from \"react\";\nimport { IonContent } from \"@ionic/react\";\nimport \"./Login.scss\";\nimport { getImage } from \"../../utils/Common\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport { FormControlLabel } from \"@mui/material\";\n\nconst LoginScreen = () => {\n  const handleForgetPassword = () => {\n    console.log(1111);\n  };\n\n  return (\n    <IonContent scrollY={false} fullscreen>\n      <div className=\"wrapper-login\">\n        <div className=\"wrapper-img\">\n          {/* <img src={getImage(\"svg/login-banner.svg\")} alt=\"login\" /> */}\n          <img src={\"assets/svg/login-banner.svg\"} alt=\"login\" />\n          <img src={\"assets/icon/icon.png\"} alt=\"login\" />\n        </div>\n        <div className=\"wrapper-body\">\n          <h1>Đăng nhập</h1>\n          <TextField\n            id=\"outlined-basic\"\n            label=\"Email hoặc số điện thoại\"\n            variant=\"outlined\"\n            className=\"custom-textfield\"\n          />\n          <TextField id=\"outlined-basic\" label=\"Mật khẩu\" variant=\"outlined\" />\n          <div className=\"wrapper-check\">\n            <FormControlLabel\n              control={<Checkbox defaultChecked />}\n              label=\"Nhớ tài khoản\"\n            />\n            <div onClick={handleForgetPassword}>Quên mật khẩu?</div>\n          </div>\n          <Button variant=\"contained\">Đăng nhập</Button>\n          <div\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n            }}\n          >\n            <img src={getImage(\"svg/subLogo.svg\")} alt=\"login\" />\n          </div>\n        </div>\n      </div>\n    </IonContent>\n  );\n};\n\nexport default LoginScreen;\n","export const getImage = (path: string) => {\n  if (window.location.hostname.includes(\"localhost\")) {\n    return `http://${window.location.hostname}:3002/assets/${path}`;\n  }\n  return `https://${window.location.hostname}/assets/${path}`;\n};\n","import React from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport { IonApp, IonRouterOutlet, setupIonicReact } from \"@ionic/react\";\nimport { IonReactRouter } from \"@ionic/react-router\";\n\n/* Core CSS required for Ionic components to work properly */\nimport \"@ionic/react/css/core.css\";\n\n/* Basic CSS for apps built with Ionic */\nimport \"@ionic/react/css/normalize.css\";\nimport \"@ionic/react/css/structure.css\";\nimport \"@ionic/react/css/typography.css\";\n\n/* Optional CSS utils that can be commented out */\nimport \"@ionic/react/css/padding.css\";\nimport \"@ionic/react/css/float-elements.css\";\nimport \"@ionic/react/css/text-alignment.css\";\nimport \"@ionic/react/css/text-transformation.css\";\nimport \"@ionic/react/css/flex-utils.css\";\nimport \"@ionic/react/css/display.css\";\nconsole.log(\"process.env.NODE_ENV\", process.env.NODE_ENV);\n/* Theme variables */\nimport \"./theme/variables.css\";\nimport LoginScreen from \"./pages/login/Login\";\n// import App from \"eRequest/App\";\n\nsetupIonicReact();\n\nconst App: React.FC = () => (\n  <IonReactRouter>\n    <IonRouterOutlet>\n      <Route exact path=\"/home\">\n        <LoginScreen />\n      </Route>\n      <Route exact path=\"/\">\n        <Redirect to=\"/home\" />\n      </Route>\n    </IonRouterOutlet>\n  </IonReactRouter>\n);\n\nexport default App;\n","/* eslint-disable no-console */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n// import App from \"eRequest/App\";\n\nconst container = document.getElementById(\"root\");\n// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\nconst root = createRoot(container!);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n"],"names":["LoginScreen","_jsx","IonContent","scrollY","fullscreen","children","_jsxs","className","src","alt","TextField","id","label","variant","FormControlLabel","control","Checkbox","defaultChecked","onClick","handleForgetPassword","console","log","Button","style","display","alignItems","justifyContent","path","window","location","hostname","includes","process","setupIonicReact","App","IonReactRouter","IonRouterOutlet","Route","exact","Redirect","to","isLocalhost","Boolean","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","container","document","getElementById","createRoot","render","React","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","reportWebVitals","m","require","exports","hydrateRoot"],"sourceRoot":""}